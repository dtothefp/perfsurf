<div class="all-locations">
  <ul>
  <% @locations.each do |location| %>
    <li><%= link_to location.name, location_path(location) %></li>
  <% end %>
  </ul>
</div>

<div id="map-canvas" style="height:800px; width:100%;"></div>

<script>

var circleOptionsGroup = <%= raw @markerOptions.to_json %>;

var overlay;

function initialize() {
  
  // Initialize the Map
  var myLatLng = new google.maps.LatLng(62.323907, -150.109291);
  var mapOptions = {
    zoom: 2,
    center: myLatLng,
    mapTypeId: google.maps.MapTypeId.SATELLITE
  };

  var map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);



  // Create the markers
  
  $.each(circleOptionsGroup, function(locationName, options){
      var counter = 1;
      var lastSwLat = options[0].latitude;
      var lastNeLat = options[0].latitude;
      var lastSwLng = options[0].longitude;
      var lastNeLng = options[0].longitude;
      var lastWind = 0;
    $.each(options, function(key, value){
      var lat = parseFloat(value.latitude);
      var lng =  parseFloat(value.longitude);
      // console.log("location name: " + locationName)
      // console.log(lat);
      // console.log(lng);
      var wind = value.wind.speed;
      // console.log("wind " + wind);
      // console.log("last SW latitude " + lastSwLat);
      // console.log("last NE latitude " + lastNeLat);
      // console.log("last SW longitude " + lastSwLng);
      // console.log("last NE longitude " + lastNeLng);
      // console.log("ID: " + value.id);

      // Define SW corner latitude
      var swBoundLat = lat - 1;

      // Define NE corner longitude
      var neBoundLat = lat + 1;

      // Define SW corner longitude
      var swBoundLng = lng - 1;

      // Define NE corner longitude
      var neBoundLng = lng + 1;



      var swBound = new google.maps.LatLng(swBoundLat, swBoundLng);
      var neBound = new google.maps.LatLng(neBoundLat, neBoundLng);
      var bounds = new google.maps.LatLngBounds(swBound, neBound);

      
      overlay = new CircleOverlay(bounds, counter, map, value, locationName);
      google.maps.event.addListener(overlay, 'click', function() {
        window.open("/locations/" + value.id, "_self");
       });
      counter ++;
    });
  });
}



CircleOverlay.prototype = new google.maps.OverlayView();
/** @constructor */
function CircleOverlay(bounds, counter, map, value, locationName) {

  // Now initialize all properties.
  this.bounds_ = bounds;
  this.counter = counter;
  this.map_ = map;
  this.latitude = value.latitude;
  this.longitude = value.longitude;
  this.id = value.id;
  this.location = locationName;
  this.wind = value.wind.speed;

  // Define a property to hold the image's div. We'll
  // actually create this div upon receipt of the onAdd()
  // method so we'll leave it null for now.
  this.div_ = null;

  // Explicitly call setMap on this overlay
  this.setMap(map);
}

/**
 * onAdd is called when the map's panes are ready and the overlay has been
 * added to the map.
 */
CircleOverlay.prototype.onAdd = function() {

  var div = document.createElement('div');
  div.dataset.id = this.id;
  div.dataset.latitude = this.latitude;
  div.dataset.longitude = this.longitude;
  div.dataset.location = this.location;
  div.dataset.wind = this.wind;
  div.dataset.sequence = "timestmp-" + this.counter;
  // div.style.border = "1px solid #FFFFFF";
  div.style.borderRadius = '50%';
  div.className = "wind-images";
  div.style.position = 'absolute';

  this.div_ = div;

  // Add the element to the "overlayImage" pane.
  var panes = this.getPanes();
  panes.overlayImage.appendChild(this.div_);
};

CircleOverlay.prototype.draw = function() {

  // We use the south-west and north-east
  // coordinates of the overlay to peg it to the correct position and size.
  // To do this, we need to retrieve the projection from the overlay.
  var overlayProjection = this.getProjection();

  // Retrieve the south-west and north-east coordinates of this overlay
  // in LatLngs and convert them to pixel coordinates.
  // We'll use these coordinates to resize the div.
  var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
  var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

  // Resize the image's div to fit the indicated dimensions.
  var div = this.div_;
  div.style.left = (sw.x - this.wind/2) + 'px';
  div.style.top = (ne.y - this.wind/2) + 'px';
  div.style.width = (3*(ne.x - sw.x) + this.wind) + 'px';
  div.style.height = (3*(sw.y - ne.y) + this.wind) + 'px';
};

CircleOverlay.prototype.onRemove = function() {
  this.div_.parentNode.removeChild(this.div_);
};

google.maps.event.addDomListener(window, 'load', initialize);

window.onload = function(){
  $('body').on('mouseover', function(){
  console.log("LOADED MAP Initialize");
  var div = $('.wind-images');
  div.css('display', 'none');
  $.each(div, function(key, value){
   $(value).on('click', function(){
     window.open('/locations/' + $(this).data('id'), '_self');
    })
  });
  div.css('cursor', 'pointer');
  $.each(div, function(key, value){
    var wind = $(value).data('wind');
    $(value).css("background-color", "hsla(" + (100-(wind*4)) + ", 100%, 50%, 1)");
  });
    $('body').on('click', function(){
      div.data('sequence', 'timestmp-1').css('display', 'block');
    });
  });
}
</script>
