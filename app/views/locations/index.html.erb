<div class="all-locations">
  <ul>
  <% @locations.each do |location| %>
    <li><%= link_to location.name, location_path(location) %></li>
  <% end %>
  </ul>
</div>

<div id="map-canvas" style="height:600px; width:100%;"></div>
<h1 id="time-counter">Start Animation</h1>

<script>

var circleOptionsGroup = <%= raw @markerOptions.to_json %>;
var overlay;

function initialize() {
  // Initialize the Map
  var myLatLng = new google.maps.LatLng(22.323907, -100.109291);
  var mapOptions = {
    zoom: 2,
    center: myLatLng,
    mapTypeId: google.maps.MapTypeId.SATELLITE
  };
  var map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);

  // Create the Overlays
  $.each(circleOptionsGroup, function(locationName, options){
    // Make counter global to use in animation function
      var counter = 1;
    $.each(options, function(key, value){
      var lat = parseFloat(value.latitude);
      var lng =  parseFloat(value.longitude);
      var wind = value.wind.speed;
      // Define SW corner latitude
      var swBoundLat = lat - 1;
      // Define NE corner longitude
      var neBoundLat = lat + 1;
      // Define SW corner longitude
      var swBoundLng = lng - 1;
      // Define NE corner longitude
      var neBoundLng = lng + 1;
      var swBound = new google.maps.LatLng(swBoundLat, swBoundLng);
      var neBound = new google.maps.LatLng(neBoundLat, neBoundLng);
      var bounds = new google.maps.LatLngBounds(swBound, neBound);

      var overlay = new CircleOverlay(bounds, counter, map, value, locationName);
      counter ++;
    });
  });
}

CircleOverlay.prototype = new google.maps.OverlayView();
/** @constructor */
function CircleOverlay(bounds, counter, map, value, locationName) {
  // Now initialize all properties.
  this.bounds_ = bounds;
  this.counter = counter;
  this.map_ = map;
  this.latitude = value.latitude;
  this.longitude = value.longitude;
  this.id = value.id;
  this.location = locationName;
  this.wind = value.wind.speed;
  // Define a property to hold the image's div. We'll
  // actually create this div upon receipt of the onAdd()
  // method so we'll leave it null for now.
  this.div_ = null;
  // Explicitly call setMap on this overlay
  this.setMap(map);
}

/**
 * onAdd is called when the map's panes are ready and the overlay has been
 * added to the map.
 */
CircleOverlay.prototype.onAdd = function() {
  var div = document.createElement('div');
  div.dataset.id = this.id;
  div.dataset.latitude = this.latitude;
  div.dataset.longitude = this.longitude;
  div.dataset.location = this.location;
  div.dataset.wind = this.wind;
  div.dataset.sequence = "timestmp-" + this.counter;
  // div.style.border = "1px solid #FFFFFF";
  div.style.borderRadius = '50%';
  // div.style.border="1px solid #fff";
  div.style.backgroundColor = "hsla(" + (100-(this.wind*4)) + ", 100%, 50%, .7)";
  div.style.cursor = 'pointer';
  if ( this.counter != 1 ) {
    div.style.display = "none";
  }
  div.className = "wind-images";
  div.style.position = 'absolute';
  var self = this;
  this.div_ = div;

  google.maps.event.addDomListener(div, 'click', function() {
    console.log("clicked");
    window.open("/locations/" + self.id, "_self");
    google.maps.event.trigger(self, 'click');
  });

  // Add the element to the "overlayImage" pane.
  var panes = this.getPanes();
  panes.overlayImage.appendChild(this.div_);
};

CircleOverlay.prototype.draw = function() {

  // We use the south-west and north-east
  // coordinates of the overlay to peg it to the correct position and size.
  // To do this, we need to retrieve the projection from the overlay.
  var overlayProjection = this.getProjection();

  // Retrieve the south-west and north-east coordinates of this overlay
  // in LatLngs and convert them to pixel coordinates.
  // We'll use these coordinates to resize the div.
  var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
  var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());
  var position = overlayProjection.fromLatLngToDivPixel(this.bounds_.getCenter());

  // Resize the image's div to fit the indicated dimensions.
  var div = this.div_;

  // div.style.left = position.x + 'px';
  // div.style.top = position.y + 'px';

  // div.style.width = (2*this.wind) + 'px';
  // div.style.height = (2*this.wind) + 'px';

  div.style.left = (sw.x - this.wind/2) + 'px';
  div.style.top = (ne.y - this.wind/2) + 'px';
  div.style.width = (4*(ne.x - sw.x) + this.wind*2) + 'px';
  div.style.height = (3.5*(sw.y - ne.y) + this.wind*2) + 'px';
};

CircleOverlay.prototype.onRemove = function() {
  this.div_.parentNode.removeChild(this.div_);
};

timestampStats = <%= raw @responses.to_json %>;

function circleCallback(counter, headerData){
  if ( counter <= timestampStats.length ) {
    console.log("click function");
    console.log("[data-sequence='timestmp-" + (counter-1) + "']");
    console.log("[data-sequence='timestmp-" + counter + "']");
    if (  counter != 1 ) {
      $("div.wind-images[data-sequence='timestmp-" + (counter-1) + "']").css('display', 'none');
      $("div.wind-images[data-sequence='timestmp-" + counter + "']").css('display', 'block'); 
    }
    console.log((headerData[counter-1]["timestamp"]));
    $('#time-counter').text(headerData[counter-1]["timestamp"]);
    counter ++;
    setTimeout(function(){circleCallback(counter, headerData)}, 400);
  } else if ( counter > timestampStats.length ) {
    $("div.wind-images[data-sequence='timestmp-" + (counter-1) + "']").css('display', 'none');
    counter = 1;
    $("div.wind-images[data-sequence='timestmp-" + counter + "']").css('display', 'block');
    setTimeout(function(){circleCallback(counter, headerData)}, 400);
  }
} 

google.maps.event.addDomListener(window, 'load', initialize);

window.onload = function(){
  $('#time-counter').css('cursor', 'pointer');
  $('#time-counter').on('click', function(){
    circleCallback(1, timestampStats);
  });
}
</script>
